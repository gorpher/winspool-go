// Code generated by "stringer -struct driver"; DO NOT EDIT.

package printer

func (p *DRIVER_INFO_8) GetDependentFiles() string {
	return utf16PtrToString(p.DependentFiles)
}
func (p *DRIVER_INFO_8) GetCoreDriverDependencies() string {
	return utf16PtrToString(p.CoreDriverDependencies)
}
func (p *DRIVER_INFO_8) GetPrintProcessor() string {
	return utf16PtrToString(p.PrintProcessor)
}
func (p *DRIVER_INFO_8) GetVendorSetup() string {
	return utf16PtrToString(p.VendorSetup)
}
func (p *DRIVER_INFO_8) GetName() string {
	return utf16PtrToString(p.Name)
}
func (p *DRIVER_INFO_8) GetEnvironment() string {
	return utf16PtrToString(p.Environment)
}
func (p *DRIVER_INFO_8) GetDriverPath() string {
	return utf16PtrToString(p.DriverPath)
}
func (p *DRIVER_INFO_8) GetDataFile() string {
	return utf16PtrToString(p.DataFile)
}
func (p *DRIVER_INFO_8) GetHardwareID() string {
	return utf16PtrToString(p.HardwareID)
}
func (p *DRIVER_INFO_8) GetProvider() string {
	return utf16PtrToString(p.Provider)
}
func (p *DRIVER_INFO_8) GetColorProfiles() string {
	return utf16PtrToString(p.ColorProfiles)
}
func (p *DRIVER_INFO_8) GetConfigFile() string {
	return utf16PtrToString(p.ConfigFile)
}
func (p *DRIVER_INFO_8) GetMonitorName() string {
	return utf16PtrToString(p.MonitorName)
}
func (p *DRIVER_INFO_8) GetMfgName() string {
	return utf16PtrToString(p.MfgName)
}
func (p *DRIVER_INFO_8) GetHelpFile() string {
	return utf16PtrToString(p.HelpFile)
}
func (p *DRIVER_INFO_8) GetDefaultDataType() string {
	return utf16PtrToString(p.DefaultDataType)
}
func (p *DRIVER_INFO_8) GetPreviousNames() string {
	return utf16PtrToString(p.PreviousNames)
}
func (p *DRIVER_INFO_8) GetOEMUrl() string {
	return utf16PtrToString(p.OEMUrl)
}
func (p *DRIVER_INFO_8) GetInfPath() string {
	return utf16PtrToString(p.InfPath)
}
func (p *DRIVER_INFO_8) GetDriver() Driver {
	return Driver{
		ConfigFile:               p.GetConfigFile(),
		MonitorName:              p.GetMonitorName(),
		MfgName:                  p.GetMfgName(),
		HelpFile:                 p.GetHelpFile(),
		DefaultDataType:          p.GetDefaultDataType(),
		PreviousNames:            p.GetPreviousNames(),
		OEMUrl:                   p.GetOEMUrl(),
		InfPath:                  p.GetInfPath(),
		Version:                  p.Version,
		DependentFiles:           p.GetDependentFiles(),
		CoreDriverDependencies:   p.GetCoreDriverDependencies(),
		MinInboxDriverVerVersion: p.MinInboxDriverVerVersion,
		PrintProcessor:           p.GetPrintProcessor(),
		VendorSetup:              p.GetVendorSetup(),
		Name:                     p.GetName(),
		Environment:              p.GetEnvironment(),
		DriverPath:               p.GetDriverPath(),
		DataFile:                 p.GetDataFile(),
		HardwareID:               p.GetHardwareID(),
		Provider:                 p.GetProvider(),
		ColorProfiles:            p.GetColorProfiles(),
		PrinterDriverAttributes:  p.PrinterDriverAttributes,
	}
}

type Driver struct {
	HelpFile                 string
	DefaultDataType          string
	CoreDriverDependencies   string
	Version                  uint32
	HardwareID               string
	Environment              string
	MonitorName              string
	OEMUrl                   string
	VendorSetup              string
	ColorProfiles            string
	InfPath                  string
	DriverPath               string
	DependentFiles           string
	DataFile                 string
	Name                     string
	PrinterDriverAttributes  uint32
	MfgName                  string
	MinInboxDriverVerVersion uint32
	Provider                 string
	PrintProcessor           string
	ConfigFile               string
	PreviousNames            string
}
