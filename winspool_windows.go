// Code generated by 'go generate'; DO NOT EDIT.

package printer

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modwinspool = windows.NewLazySystemDLL("winspool.drv")

	procClosePrinter       = modwinspool.NewProc("ClosePrinter")
	procEndDocPrinter      = modwinspool.NewProc("EndDocPrinter")
	procEndPagePrinter     = modwinspool.NewProc("EndPagePrinter")
	procEnumJobsW          = modwinspool.NewProc("EnumJobsW")
	procEnumPrintersW      = modwinspool.NewProc("EnumPrintersW")
	procGetDefaultPrinterW = modwinspool.NewProc("GetDefaultPrinterW")
	procGetJobW            = modwinspool.NewProc("GetJobW")
	procGetPrinterDriverW  = modwinspool.NewProc("GetPrinterDriverW")
	procOpenPrinterW       = modwinspool.NewProc("OpenPrinterW")
	procSetJobW            = modwinspool.NewProc("SetJobW")
	procStartDocPrinterW   = modwinspool.NewProc("StartDocPrinterW")
	procStartPagePrinter   = modwinspool.NewProc("StartPagePrinter")
	procWritePrinter       = modwinspool.NewProc("WritePrinter")
)

func closePrinter(h HANDLE) (err error) {
	r1, _, e1 := syscall.Syscall(procClosePrinter.Addr(), 1, uintptr(h), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func endDocPrinter(h HANDLE) (err error) {
	r1, _, e1 := syscall.Syscall(procEndDocPrinter.Addr(), 1, uintptr(h), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func endPagePrinter(h HANDLE) (err error) {
	r1, _, e1 := syscall.Syscall(procEndPagePrinter.Addr(), 1, uintptr(h), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func enumJobs(h HANDLE, firstJob uint32, noJobs uint32, level uint32, buf *byte, bufN uint32, bytesNeeded *uint32, jobsReturned *uint32) (err error) {
	r1, _, e1 := syscall.Syscall9(procEnumJobsW.Addr(), 8, uintptr(h), uintptr(firstJob), uintptr(noJobs), uintptr(level), uintptr(unsafe.Pointer(buf)), uintptr(bufN), uintptr(unsafe.Pointer(bytesNeeded)), uintptr(unsafe.Pointer(jobsReturned)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func enumPrinters(flags uint32, name *uint16, level uint32, buf *byte, bufN uint32, needed *uint32, returned *uint32) (err error) {
	r1, _, e1 := syscall.Syscall9(procEnumPrintersW.Addr(), 7, uintptr(flags), uintptr(unsafe.Pointer(name)), uintptr(level), uintptr(unsafe.Pointer(buf)), uintptr(bufN), uintptr(unsafe.Pointer(needed)), uintptr(unsafe.Pointer(returned)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func getDefaultPrinter(buf *uint16, bufN *uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procGetDefaultPrinterW.Addr(), 2, uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(bufN)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func getJob(h HANDLE, jobId uint32, level uint32, buf *byte, cbBuf uint32, pcbNeeded *uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procGetJobW.Addr(), 6, uintptr(h), uintptr(jobId), uintptr(level), uintptr(unsafe.Pointer(buf)), uintptr(cbBuf), uintptr(unsafe.Pointer(pcbNeeded)))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func getPrinterDriver(h HANDLE, env *uint16, level uint32, di *byte, n uint32, needed *uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procGetPrinterDriverW.Addr(), 6, uintptr(h), uintptr(unsafe.Pointer(env)), uintptr(level), uintptr(unsafe.Pointer(di)), uintptr(n), uintptr(unsafe.Pointer(needed)))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func openPrinter(name *uint16, h *HANDLE, defaults uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procOpenPrinterW.Addr(), 3, uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(h)), uintptr(defaults))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func setJob(h HANDLE, jobId uint32, level uint32, buf uintptr, command uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procSetJobW.Addr(), 5, uintptr(h), uintptr(jobId), uintptr(level), uintptr(buf), uintptr(command), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func startDocPrinter(h HANDLE, level uint32, docinfo *DOC_INFO_1) (err error) {
	r1, _, e1 := syscall.Syscall(procStartDocPrinterW.Addr(), 3, uintptr(h), uintptr(level), uintptr(unsafe.Pointer(docinfo)))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func startPagePrinter(h HANDLE) (err error) {
	r1, _, e1 := syscall.Syscall(procStartPagePrinter.Addr(), 1, uintptr(h), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func writePrinter(h HANDLE, buf *byte, bufN uint32, written *uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procWritePrinter.Addr(), 4, uintptr(h), uintptr(unsafe.Pointer(buf)), uintptr(bufN), uintptr(unsafe.Pointer(written)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
